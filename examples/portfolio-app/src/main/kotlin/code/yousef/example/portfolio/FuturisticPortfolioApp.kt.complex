package code.yousef.example.portfolio

import code.yousef.example.portfolio.models.*
import code.yousef.example.portfolio.repository.PortfolioRepositoryImpl
import code.yousef.summon.annotation.Composable
import code.yousef.summon.runtime.*
import code.yousef.summon.components.layout.*
import code.yousef.summon.components.display.*
import code.yousef.summon.components.input.*
import code.yousef.summon.components.feedback.*
import code.yousef.summon.components.navigation.*
import code.yousef.summon.modifier.*
import code.yousef.summon.modifier.LayoutModifierExtras.top
import code.yousef.summon.modifier.LayoutModifierExtras.left
import code.yousef.summon.modifier.LayoutModifierExtras.right
import code.yousef.summon.modifier.LayoutModifierExtras.bottom
import code.yousef.summon.modifier.LayoutModifierExtras.flex
import code.yousef.summon.modifier.LayoutModifierExtras.flexDirection
import code.yousef.summon.modifier.LayoutModifierExtras.gap
import code.yousef.summon.extensions.*
import code.yousef.summon.state.mutableStateOf
import code.yousef.summon.state.MutableState
import code.yousef.example.portfolio.components.*
import code.yousef.example.portfolio.theme.*
import jakarta.enterprise.context.ApplicationScoped
import jakarta.inject.Inject
import jakarta.ws.rs.*
import jakarta.ws.rs.core.MediaType

/**
 * Futuristic Portfolio with Catppuccin theme and graph visualization
 * Built entirely with Summon framework - no manual HTML/CSS/JS
 */
@Path("/")
@ApplicationScoped
class FuturisticPortfolioApp {
    
    @Inject
    lateinit var portfolioRepository: PortfolioRepositoryImpl
    
    private val renderer = PlatformRenderer()
    
    @GET
    @Produces(MediaType.TEXT_HTML)
    fun home(): String {
        return renderPage("/") {
            FuturisticGraphVisualizationPage()
        }
    }
    
    @GET
    @Path("/projects")
    @Produces(MediaType.TEXT_HTML)
    fun projects(): String {
        val projects = portfolioRepository.getPublishedProjects()
        return renderPage("/projects") {
            FuturisticProjectsPage(projects)
        }
    }
    
    @GET
    @Path("/projects/{slug}")
    @Produces(MediaType.TEXT_HTML)
    fun projectDetail(@PathParam("slug") slug: String): String {
        val project = portfolioRepository.getProjectBySlug(slug)
        return renderPage("/projects") {
            if (project != null) {
                FuturisticProjectDetailPage(project)
            } else {
                FuturisticNotFoundPage()
            }
        }
    }
    
    @GET
    @Path("/about")
    @Produces(MediaType.TEXT_HTML)
    fun about(): String {
        return renderPage("/about") {
            FuturisticAboutPage()
        }
    }
    
    @GET
    @Path("/skills")
    @Produces(MediaType.TEXT_HTML)
    fun skills(): String {
        return renderPage("/skills") {
            FuturisticSkillsPage()
        }
    }
    
    @GET
    @Path("/contact")
    @Produces(MediaType.TEXT_HTML)
    fun contact(): String {
        return renderPage("/contact") {
            FuturisticContactPage()
        }
    }
    
    @POST
    @Path("/contact")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    fun submitContact(
        @FormParam("name") name: String?,
        @FormParam("email") email: String?,
        @FormParam("message") message: String?
    ): String {
        return renderPage("/contact") {
            FuturisticContactSuccessPage(name ?: "Friend")
        }
    }
    
    /**
     * Renders a page with the futuristic layout
     */
    private fun renderPage(currentPath: String, content: @Composable () -> Unit): String {
        return renderer.renderComposableRoot {
            FuturisticLayout(currentPath, content)
        }
    }
    
    @Composable
    private fun FuturisticLayout(
        currentPath: String,
        content: @Composable () -> Unit
    ) {
        Box(modifier = Modifier().fillMaxSize()) {
            // Global styles
            FuturisticGlobalStyles()
            
            // Animated background
            AnimatedBackground()
            
            // Floating particles
            repeat(20) { i ->
                FloatingParticle(
                    x = "${(i * 5 + 10)}%",
                    y = "${(i * 7 + 5)}%",
                    delay = "${i * 0.5}s",
                    duration = "${10 + i % 5}s",
                    size = if (i % 3 == 0) "6px" else "4px",
                    color = when (i % 4) {
                        0 -> CatppuccinMocha.BLUE
                        1 -> CatppuccinMocha.TEAL
                        2 -> CatppuccinMocha.MAUVE
                        else -> CatppuccinMocha.SAPPHIRE
                    }
                )
            }
            
            // Terminal navigation
            TerminalNavBar(currentPath)
            
            // Main content with padding for nav
            Box(
                modifier = Modifier()
                    .paddingTop("60px")
                    .minHeight("100vh")
                    .position(Position.Relative)
                    .zIndex(FuturisticTheme.Z_CONTENT)
            ) {
                content()
            }
        }
    }
}

/**
 * Graph Visualization Page - Hero section with interactive project nodes
 */
@Composable
fun FuturisticGraphVisualizationPage() {
    val selectedNode: MutableState<String?> = mutableStateOf(null)
    
    Box(
        modifier = Modifier()
            .fillMaxSize()
            .minHeight("100vh")
            .position(Position.Relative)
    ) {
        // Title and description
        Column(
            modifier = Modifier()
                .position(Position.Absolute)
                .top(100.px)
                .left("50%")
                .transform("translateX(-50%)")
                .zIndex(FuturisticTheme.Z_CONTENT + 1)
                .textAlign("center")
        ) {
            Text(
                text = "Yousef Maher",
                modifier = Modifier()
                    .fontFamily("'JetBrains Mono', monospace")
                    .fontSize("48px")
                    .fontWeight("700")
                    .background("linear-gradient(135deg, ${CatppuccinMocha.BLUE} 0%, ${CatppuccinMocha.TEAL} 50%, ${CatppuccinMocha.MAUVE} 100%)")
                    .style("-webkit-background-clip", "text")
                    .style("-webkit-text-fill-color", "transparent")
                    .style("background-clip", "text")
                    .marginBottom("16px")
                    .animation("fadeIn 1s ease-out")
            )
            
            Text(
                text = "Building the future of UI frameworks, operating systems, and programming languages",
                modifier = Modifier()
                    .fontSize("18px")
                    .color(CatppuccinMocha.SUBTEXT1)
                    .maxWidth("600px")
                    .lineHeight("1.6")
                    .animation("fadeIn 1.5s ease-out")
            )
        }
        
        // Graph nodes
        Box(
            modifier = Modifier()
                .position(Position.Absolute)
                .top("50%")
                .left("50%")
                .transform("translate(-50%, -50%)")
                .width("1000px")
                .height("600px")
        ) {
            // Connection lines
            ConnectionLine("50%", "30%", "30%", "70%", CatppuccinMocha.BLUE)
            ConnectionLine("50%", "30%", "70%", "70%", CatppuccinMocha.TEAL)
            ConnectionLine("30%", "70%", "70%", "70%", CatppuccinMocha.MAUVE)
            
            // Project nodes
            GraphNode(
                title = "Summon",
                description = "Type-safe Kotlin Multiplatform UI framework",
                x = "50%",
                y = "30%",
                glowColor = CatppuccinMocha.BLUE,
                isActive = selectedNode.value == "summon",
                onClick = { selectedNode.value = "summon" }
            )
            
            GraphNode(
                title = "HorizonOS",
                description = "Graph-based desktop operating system",
                x = "30%",
                y = "70%",
                glowColor = CatppuccinMocha.TEAL,
                isActive = selectedNode.value == "horizonos",
                onClick = { selectedNode.value = "horizonos" }
            )
            
            GraphNode(
                title = "SeenLang",
                description = "Multilingual programming language",
                x = "70%",
                y = "70%",
                glowColor = CatppuccinMocha.MAUVE,
                isActive = selectedNode.value == "seenlang",
                onClick = { selectedNode.value = "seenlang" }
            )
        }
        
        // Scroll indicator
        Box(
            modifier = Modifier()
                .position(Position.Absolute)
                .bottom("40px")
                .left("50%")
                .transform("translateX(-50%)")
                .textAlign("center")
                .animation("float 3s ease-in-out infinite")
        ) {
            Column(
                modifier = Modifier()
                    .alignItems(AlignItems.Center)
            ) {
                Text(
                    text = "[SCROLL]",
                    modifier = Modifier()
                        .fontFamily("'JetBrains Mono', monospace")
                        .fontSize("12px")
                        .color(CatppuccinMocha.OVERLAY1)
                        .opacity("0.7")
                        .marginBottom("8px")
                )
                Box(
                    modifier = Modifier()
                        .width("1px")
                        .height("40px")
                        .backgroundColor(CatppuccinMocha.OVERLAY1)
                        .opacity("0.3")
                )
            }
        }
    }
}

/**
 * Projects Page with detailed cards
 */
@Composable
fun FuturisticProjectsPage(projects: List<Project>) {
    Column(
        modifier = Modifier()
            .fillMaxWidth()
            .padding("40px")
    ) {
        // Page header
        Column(
            modifier = Modifier()
                .marginBottom("40px")
                .textAlign("center")
        ) {
            Text(
                text = "// PROJECTS",
                modifier = Modifier()
                    .fontFamily("'JetBrains Mono', monospace")
                    .fontSize("14px")
                    .color(CatppuccinMocha.TEAL)
                    .marginBottom("8px")
            )
            Text(
                text = "Pushing the boundaries of technology",
                modifier = Modifier()
                    .fontSize("32px")
                    .fontWeight("700")
                    .color(CatppuccinMocha.TEXT)
                    .marginBottom("16px")
            )
        }
        
        // Project cards
        projects.forEach { project ->
            FuturisticProjectCard(project)
        }
    }
}

@Composable
fun FuturisticProjectCard(project: Project) {
    NavigationLink(
        href = "/projects/${project.slug}",
        modifier = Modifier()
            .textDecoration("none")
            .display(Display.Block)
            .color("inherit")
    ) {
        GlassCard(
            glowColor = FuturisticTheme.glowColors[project.slug] ?: FuturisticTheme.glowColors["default"]!!,
            modifier = Modifier()
                .fillMaxWidth()
                .marginBottom("24px")
        ) {
            Row(
                modifier = Modifier()
                    .alignItems(AlignItems.Center)
            ) {
                // Project icon/number
                Box(
                    modifier = Modifier()
                        .width("80px")
                        .height("80px")
                        .borderRadius("12px")
                        .background("linear-gradient(135deg, rgba(${hexToRgb(CatppuccinMocha.SURFACE1)}, 0.5) 0%, rgba(${hexToRgb(CatppuccinMocha.SURFACE2)}, 0.3) 100%)")
                        .display(Display.Flex)
                        .alignItems(AlignItems.Center)
                        .justifyContent(JustifyContent.Center)
                        .marginRight("24px")
                ) {
                    Text(
                        text = when(project.slug) {
                            "summon" -> "01"
                            "horizonos" -> "02"
                            "seenlang" -> "03"
                            else -> "00"
                        },
                        modifier = Modifier()
                            .fontFamily("'JetBrains Mono', monospace")
                            .fontSize("24px")
                            .fontWeight("700")
                            .color(CatppuccinMocha.OVERLAY2)
                    )
                }
                
                // Project info
                Column(
                    modifier = Modifier()
                        .flex("1")
                ) {
                    Text(
                        text = project.title,
                        modifier = Modifier()
                            .fontSize("24px")
                            .fontWeight("700")
                            .color(CatppuccinMocha.TEXT)
                            .marginBottom("8px")
                    )
                    
                    Text(
                        text = project.description ?: "",
                        modifier = Modifier()
                            .fontSize("16px")
                            .color(CatppuccinMocha.SUBTEXT1)
                            .lineHeight("1.5")
                            .marginBottom("8px")
                    )
                    
                    // Tech stack badges
                    Row(
                        modifier = Modifier()
                            .flexWrap("wrap")
                    ) {
                        project.techStack.forEach { tech ->
                            TechBadge(tech)
                        }
                    }
                }
                
                // Arrow indicator
                Text(
                    text = "→",
                    modifier = Modifier()
                        .fontSize("24px")
                        .color(CatppuccinMocha.OVERLAY1)
                        .style("transition", "transform ${FuturisticTheme.ANIMATION_FAST} ease")
                )
            }
        }
    }
}

@Composable
fun TechBadge(tech: String) {
    Box(
        modifier = Modifier()
            .padding("4px 12px")
            .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.SURFACE1)}, 0.5)")
            .border("1px solid rgba(${hexToRgb(CatppuccinMocha.OVERLAY1)}, 0.3)")
            .borderRadius("16px")
            .marginRight("8px")
            .marginBottom("4px")
    ) {
        Text(
            text = tech,
            modifier = Modifier()
                .fontSize("12px")
                .fontFamily("'JetBrains Mono', monospace")
                .color(CatppuccinMocha.SUBTEXT1)
        )
    }
}

/**
 * About Page with terminal-style animation
 */
@Composable
fun FuturisticAboutPage() {
    Box(
        modifier = Modifier()
            .fillMaxSize()
            .padding("40px")
    ) {
        GlassCard(
            modifier = Modifier()
                .maxWidth("800px")
                .margin("0 auto")
        ) {
            Column {
                // Terminal header
                Row(
                    modifier = Modifier()
                        .marginBottom("16px")
                        .alignItems(AlignItems.Center)
                ) {
                    Box(
                        modifier = Modifier()
                            .width("12px")
                            .height("12px")
                            .borderRadius("50%")
                            .backgroundColor(CatppuccinMocha.RED)
                            .marginRight("8px")
                    )
                    Box(
                        modifier = Modifier()
                            .width("12px")
                            .height("12px")
                            .borderRadius("50%")
                            .backgroundColor(CatppuccinMocha.YELLOW)
                            .marginRight("8px")
                    )
                    Box(
                        modifier = Modifier()
                            .width("12px")
                            .height("12px")
                            .borderRadius("50%")
                            .backgroundColor(CatppuccinMocha.GREEN)
                            .marginRight("16px")
                    )
                    Text(
                        text = "about.sh",
                        modifier = Modifier()
                            .fontFamily("'JetBrains Mono', monospace")
                            .fontSize("14px")
                            .color(CatppuccinMocha.OVERLAY1)
                    )
                }
                
                // Terminal content
                Box(
                    modifier = Modifier()
                        .backgroundColor(CatppuccinMocha.CRUST)
                        .borderRadius("8px")
                        .padding("24px")
                        .fontFamily("'JetBrains Mono', monospace")
                ) {
                    Column {
                        TypewriterText("$ whoami", CatppuccinMocha.GREEN, "0s")
                        TypewriterText("> Yousef Maher", CatppuccinMocha.TEXT, "0.5s")
                        
                        TypewriterText("$ cat /etc/profile", CatppuccinMocha.GREEN, "1s")
                        TypewriterText("> Software architect and language designer", CatppuccinMocha.TEXT, "1.5s")
                        TypewriterText("> Building next-generation developer tools", CatppuccinMocha.TEXT, "2s")
                        TypewriterText("> Passionate about type safety and DX", CatppuccinMocha.TEXT, "2.5s")
                        
                        TypewriterText("$ ls -la /projects", CatppuccinMocha.GREEN, "3s")
                        TypewriterText("drwxr-xr-x  summon/       # UI framework", CatppuccinMocha.BLUE, "3.5s")
                        TypewriterText("drwxr-xr-x  horizonos/    # Graph OS", CatppuccinMocha.TEAL, "4s")
                        TypewriterText("drwxr-xr-x  seenlang/     # Multi-lang PL", CatppuccinMocha.MAUVE, "4.5s")
                        
                        Box(
                            modifier = Modifier()
                                .marginTop("8px")
                                .animation("pulse 1s ease-in-out infinite")
                                .animationDelay("5s")
                        ) {
                            Text(
                                text = "█",
                                modifier = Modifier()
                                    .color(CatppuccinMocha.TEXT)
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun TypewriterText(
    text: String,
    color: String,
    delay: String
) {
    Text(
        text = text,
        modifier = Modifier()
            .color(color)
            .fontSize("14px")
            .opacity("0")
            .animation("fadeIn 0.5s ease-out forwards")
            .animationDelay(delay)
            .marginBottom("8px")
    )
}

/**
 * Skills Page with animated progress bars
 */
@Composable
fun FuturisticSkillsPage() {
    Column(
        modifier = Modifier()
            .fillMaxWidth()
            .padding("40px")
    ) {
        Text(
            text = "// SKILLS",
            modifier = Modifier()
                .fontFamily("'JetBrains Mono', monospace")
                .fontSize("14px")
                .color(CatppuccinMocha.TEAL)
                .marginBottom("8px")
                .textAlign("center")
        )
        
        SkillCategory(
            title = "Languages",
            skills = listOf(
                Skill("Kotlin", 95, CatppuccinMocha.MAUVE),
                Skill("TypeScript", 90, CatppuccinMocha.BLUE),
                Skill("Rust", 75, CatppuccinMocha.PEACH),
                Skill("Go", 70, CatppuccinMocha.TEAL)
            )
        )
        
        SkillCategory(
            title = "Frameworks",
            skills = listOf(
                Skill("Jetpack Compose", 95, CatppuccinMocha.GREEN),
                Skill("React", 85, CatppuccinMocha.SKY),
                Skill("Ktor", 90, CatppuccinMocha.PINK),
                Skill("Spring Boot", 80, CatppuccinMocha.YELLOW)
            )
        )
        
        SkillCategory(
            title = "Technologies",
            skills = listOf(
                Skill("Multiplatform Development", 95, CatppuccinMocha.LAVENDER),
                Skill("Compiler Design", 85, CatppuccinMocha.MAROON),
                Skill("System Architecture", 90, CatppuccinMocha.FLAMINGO),
                Skill("UI/UX Design", 80, CatppuccinMocha.ROSEWATER)
            )
        )
    }
}

data class Skill(val name: String, val level: Int, val color: String)

@Composable
fun SkillCategory(title: String, skills: List<Skill>) {
    GlassCard(
        modifier = Modifier()
            .fillMaxWidth()
            .marginBottom("24px")
    ) {
        Column {
            Text(
                text = title,
                modifier = Modifier()
                    .fontSize("20px")
                    .fontWeight("600")
                    .color(CatppuccinMocha.TEXT)
                    .marginBottom("16px")
            )
            
            skills.forEach { skill ->
                SkillBar(skill)
            }
        }
    }
}

@Composable
fun SkillBar(skill: Skill) {
    Column(
        modifier = Modifier()
            .marginBottom("16px")
    ) {
        Row(
            modifier = Modifier()
                .justifyContent(JustifyContent.SpaceBetween)
                .alignItems(AlignItems.Center)
                .marginBottom("8px")
        ) {
            Text(
                text = skill.name,
                modifier = Modifier()
                    .fontSize("14px")
                    .color(CatppuccinMocha.SUBTEXT1)
            )
            Text(
                text = "${skill.level}%",
                modifier = Modifier()
                    .fontSize("12px")
                    .fontFamily("'JetBrains Mono', monospace")
                    .color(skill.color)
            )
        }
        
        // Progress bar background
        Box(
            modifier = Modifier()
                .fillMaxWidth()
                .height("8px")
                .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.SURFACE0)}, 0.5)")
                .borderRadius("4px")
                .overflow(Overflow.Hidden)
        ) {
            // Progress bar fill
            Box(
                modifier = Modifier()
                    .width("${skill.level}%")
                    .height("100%")
                    .background("linear-gradient(90deg, ${skill.color} 0%, ${skill.color}88 100%)")
                    .boxShadow("0 0 10px rgba(${hexToRgb(skill.color)}, 0.5)")
                    .animation("slideInFromLeft 1s ease-out")
                    .style("transform-origin", "left center")
            )
        }
    }
}

/**
 * Contact Page with glassmorphic form
 */
@Composable
fun FuturisticContactPage() {
    Box(
        modifier = Modifier()
            .fillMaxSize()
            .padding("40px")
    ) {
        GlassCard(
            modifier = Modifier()
                .maxWidth("600px")
                .margin("0 auto")
        ) {
            Column {
                Text(
                    text = "// GET IN TOUCH",
                    modifier = Modifier()
                        .fontFamily("'JetBrains Mono', monospace")
                        .fontSize("14px")
                        .color(CatppuccinMocha.TEAL)
                        .textAlign("center")
                        .marginBottom("8px")
                )
                
                Text(
                    text = "Let's build something amazing together",
                    modifier = Modifier()
                        .fontSize("24px")
                        .fontWeight("600")
                        .color(CatppuccinMocha.TEXT)
                        .textAlign("center")
                        .marginBottom("24px")
                )
                
                FuturisticContactForm()
            }
        }
    }
}

@Composable
fun FuturisticContactForm() {
    Form(
        onSubmit = { /* Handle form submission */ },
        modifier = Modifier()
            .display(Display.Flex)
            .flexDirection(FlexDirection.Column)
            .attribute("method", "POST")
            .attribute("action", "/contact")
    ) {
        FuturisticTextField(
            value = "",
            onValueChange = { },
            placeholder = "Name",
            name = "name"
        )
        
        FuturisticTextField(
            value = "",
            onValueChange = { },
            placeholder = "Email",
            name = "email",
            type = TextFieldType.Email
        )
        
        FuturisticTextArea(
            value = "",
            onValueChange = { },
            placeholder = "Message",
            name = "message",
            rows = 5
        )
        
        Button(
            label = "Send Message",
            onClick = { },
            modifier = Modifier()
                .width("100%")
                .padding("16px")
                .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.2)")
                .border("1px solid ${CatppuccinMocha.TEAL}")
                .borderRadius("8px")
                .color(CatppuccinMocha.TEAL)
                .fontSize("16px")
                .fontWeight("600")
                .cursor("pointer")
                .style("transition", "all ${FuturisticTheme.ANIMATION_FAST} ease")
                .hover(mapOf(
                    "background-color" to "rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.3)",
                    "transform" to "translateY(-2px)",
                    "box-shadow" to "0 8px 20px rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.3)"
                ))
                .marginTop("20px")
        )
    }
}

@Composable
fun FuturisticTextField(
    value: String,
    onValueChange: (String) -> Unit,
    placeholder: String,
    name: String,
    type: TextFieldType = TextFieldType.Text,
    modifier: Modifier = Modifier()
) {
    TextField(
        value = value,
        onValueChange = onValueChange,
        placeholder = placeholder,
        type = type,
        modifier = modifier
            .width("100%")
            .padding("16px")
            .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.SURFACE0)}, 0.3)")
            .border("1px solid rgba(${hexToRgb(CatppuccinMocha.OVERLAY1)}, 0.3)")
            .borderRadius("8px")
            .color(CatppuccinMocha.TEXT)
            .fontSize("16px")
            .attribute("name", name)
            .style("transition", "all ${FuturisticTheme.ANIMATION_FAST} ease")
            .style("::placeholder", "color: ${CatppuccinMocha.OVERLAY1}")
            .hover(mapOf(
                "border-color" to "rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.5)"
            ))
            .marginBottom("20px")
    )
}

@Composable
fun FuturisticTextArea(
    value: String,
    onValueChange: (String) -> Unit,
    placeholder: String,
    name: String,
    rows: Int = 4,
    modifier: Modifier = Modifier()
) {
    TextArea(
        value = value,
        onValueChange = onValueChange,
        placeholder = placeholder,
        rows = rows,
        modifier = modifier
            .width("100%")
            .padding("16px")
            .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.SURFACE0)}, 0.3)")
            .border("1px solid rgba(${hexToRgb(CatppuccinMocha.OVERLAY1)}, 0.3)")
            .borderRadius("8px")
            .color(CatppuccinMocha.TEXT)
            .fontSize("16px")
            .attribute("name", name)
            .style("resize", "vertical")
            .style("min-height", "120px")
            .style("transition", "all ${FuturisticTheme.ANIMATION_FAST} ease")
            .style("::placeholder", "color: ${CatppuccinMocha.OVERLAY1}")
            .hover(mapOf(
                "border-color" to "rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.5)"
            ))
            .marginBottom("20px")
    )
}

/**
 * Contact Success Page
 */
@Composable
fun FuturisticContactSuccessPage(name: String) {
    Box(
        modifier = Modifier()
            .fillMaxSize()
            .display(Display.Flex)
            .alignItems(AlignItems.Center)
            .justifyContent(JustifyContent.Center)
    ) {
        GlassCard(
            modifier = Modifier()
                .maxWidth("500px")
                .textAlign("center")
        ) {
            Column(
                modifier = Modifier()
                    .alignItems(AlignItems.Center)
            ) {
                // Success icon
                Box(
                    modifier = Modifier()
                        .width("80px")
                        .height("80px")
                        .borderRadius("50%")
                        .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.GREEN)}, 0.2)")
                        .display(Display.Flex)
                        .alignItems(AlignItems.Center)
                        .justifyContent(JustifyContent.Center)
                        .marginBottom("16px")
                        .animation("pulse 2s ease-in-out infinite")
                ) {
                    Text(
                        text = "✓",
                        modifier = Modifier()
                            .fontSize("32px")
                            .color(CatppuccinMocha.GREEN)
                    )
                }
                
                Text(
                    text = "Message Sent!",
                    modifier = Modifier()
                        .fontSize("32px")
                        .fontWeight("700")
                        .color(CatppuccinMocha.TEXT)
                        .marginBottom("8px")
                )
                
                Text(
                    text = "Thanks for reaching out, $name. I'll get back to you soon!",
                    modifier = Modifier()
                        .fontSize("16px")
                        .color(CatppuccinMocha.SUBTEXT1)
                        .marginBottom("24px")
                )
                
                NavigationLink(
                    href = "/",
                    modifier = Modifier()
                        .padding("12px 24px")
                        .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.2)")
                        .border("1px solid ${CatppuccinMocha.TEAL}")
                        .borderRadius("8px")
                        .color(CatppuccinMocha.TEAL)
                        .textDecoration("none")
                        .fontSize("14px")
                        .fontWeight("600")
                        .style("transition", "all ${FuturisticTheme.ANIMATION_FAST} ease")
                        .hover(mapOf(
                            "background-color" to "rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.3)",
                            "transform" to "translateY(-2px)"
                        ))
                ) {
                    Text("Back to Home")
                }
            }
        }
    }
}

/**
 * Project Detail Page
 */
@Composable
fun FuturisticProjectDetailPage(project: Project) {
    Column(
        modifier = Modifier()
            .fillMaxWidth()
            .padding("40px")
    ) {
        NavigationLink(
            href = "/projects",
            modifier = Modifier()
                .display(Display.InlineFlex)
                .alignItems(AlignItems.Center)
                .marginBottom("32px")
                .color(CatppuccinMocha.TEAL)
                .textDecoration("none")
                .fontFamily("'JetBrains Mono', monospace")
                .fontSize("14px")
                .hover(mapOf(
                    "color" to CatppuccinMocha.TEXT
                ))
        ) {
            Text("← back to projects")
        }
        
        GlassCard(
            glowColor = FuturisticTheme.glowColors[project.slug] ?: FuturisticTheme.glowColors["default"]!!,
            modifier = Modifier()
                .fillMaxWidth()
                .marginBottom("32px")
        ) {
            Column {
                Text(
                    text = project.title,
                    modifier = Modifier()
                        .fontSize("36px")
                        .fontWeight("700")
                        .color(CatppuccinMocha.TEXT)
                        .marginBottom("8px")
                )
                
                Text(
                    text = project.description ?: "",
                    modifier = Modifier()
                        .fontSize("18px")
                        .color(CatppuccinMocha.SUBTEXT1)
                        .lineHeight("1.6")
                        .marginBottom("16px")
                )
                
                Row(
                    modifier = Modifier()
                        .flexWrap("wrap")
                        .marginBottom("24px")
                ) {
                    project.techStack.forEach { tech ->
                        TechBadge(tech)
                    }
                }
                
                Divider(
                    modifier = Modifier()
                        .marginTop("16px")
                        .marginBottom("16px")
                        .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.OVERLAY0)}, 0.2)")
                )
                
                // Project links
                Row {
                    project.liveUrl?.let { url ->
                        ExternalLink(
                            href = url,
                            modifier = Modifier()
                                .padding("12px 20px")
                                .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.BLUE)}, 0.2)")
                                .border("1px solid ${CatppuccinMocha.BLUE}")
                                .borderRadius("8px")
                                .color(CatppuccinMocha.BLUE)
                                .textDecoration("none")
                                .fontSize("14px")
                                .fontWeight("600")
                                .marginRight("16px")
                                .hover(mapOf(
                                    "background-color" to "rgba(${hexToRgb(CatppuccinMocha.BLUE)}, 0.3)"
                                ))
                        ) {
                            Text("View Live →")
                        }
                    }
                    
                    project.repoUrl?.let { url ->
                        ExternalLink(
                            href = url,
                            modifier = Modifier()
                                .padding("12px 20px")
                                .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.MAUVE)}, 0.2)")
                                .border("1px solid ${CatppuccinMocha.MAUVE}")
                                .borderRadius("8px")
                                .color(CatppuccinMocha.MAUVE)
                                .textDecoration("none")
                                .fontSize("14px")
                                .fontWeight("600")
                                .hover(mapOf(
                                    "background-color" to "rgba(${hexToRgb(CatppuccinMocha.MAUVE)}, 0.3)"
                                ))
                        ) {
                            Text("View Source →")
                        }
                    }
                }
            }
        }
    }
}

/**
 * Not Found Page
 */
@Composable
fun FuturisticNotFoundPage() {
    Box(
        modifier = Modifier()
            .fillMaxSize()
            .display(Display.Flex)
            .alignItems(AlignItems.Center)
            .justifyContent(JustifyContent.Center)
    ) {
        GlassCard(
            modifier = Modifier()
                .maxWidth("500px")
                .textAlign("center")
        ) {
            Column(
                modifier = Modifier()
                    .alignItems(AlignItems.Center)
            ) {
                Text(
                    text = "404",
                    modifier = Modifier()
                        .fontSize("72px")
                        .fontWeight("700")
                        .fontFamily("'JetBrains Mono', monospace")
                        .background("linear-gradient(135deg, ${CatppuccinMocha.RED} 0%, ${CatppuccinMocha.MAROON} 100%)")
                        .style("-webkit-background-clip", "text")
                        .style("-webkit-text-fill-color", "transparent")
                        .style("background-clip", "text")
                        .animation("pulse 2s ease-in-out infinite")
                        .marginBottom("16px")
                )
                
                Text(
                    text = "Page Not Found",
                    modifier = Modifier()
                        .fontSize("24px")
                        .color(CatppuccinMocha.TEXT)
                        .marginBottom("8px")
                )
                
                Text(
                    text = "The portal you're looking for doesn't exist in this dimension",
                    modifier = Modifier()
                        .fontSize("16px")
                        .color(CatppuccinMocha.SUBTEXT1)
                        .marginBottom("24px")
                )
                
                NavigationLink(
                    href = "/",
                    modifier = Modifier()
                        .padding("12px 24px")
                        .backgroundColor("rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.2)")
                        .border("1px solid ${CatppuccinMocha.TEAL}")
                        .borderRadius("8px")
                        .color(CatppuccinMocha.TEAL)
                        .textDecoration("none")
                        .fontSize("14px")
                        .fontWeight("600")
                        .hover(mapOf(
                            "background-color" to "rgba(${hexToRgb(CatppuccinMocha.TEAL)}, 0.3)"
                        ))
                ) {
                    Text("Return Home")
                }
            }
        }
    }
}

/**
 * Utility function to convert hex color to RGB values
 */
private fun hexToRgb(hex: String): String {
    val color = hex.removePrefix("#")
    val r = color.substring(0, 2).toInt(16)
    val g = color.substring(2, 4).toInt(16)
    val b = color.substring(4, 6).toInt(16)
    return "$r, $g, $b"
}