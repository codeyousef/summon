package code.yousef.example.springboot

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.ui.Model
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.servlet.mvc.support.RedirectAttributes
import org.springframework.web.bind.annotation.ResponseBody
import code.yousef.summon.components.layout.Div
import code.yousef.summon.components.display.Text
import code.yousef.summon.modifier.Modifier
import code.yousef.summon.extensions.*
// import code.yousef.summon.i18n.I18nProvider  // Temporarily disabled
import code.yousef.example.springboot.pages.*
import code.yousef.example.springboot.components.EditUserFormComponent
import code.yousef.example.springboot.*
import code.yousef.example.springboot.i18n.Translations

/**
 * Web controller for handling routes and rendering pages with pure Summon components.
 * No Thymeleaf templates or raw HTML/CSS/JS - everything is pure Kotlin/Summon.
 */
@Controller
class WebController @Autowired constructor(
    private val userService: UserService,
    private val summonRenderer: SummonRenderer
) {
    
    private val logger = LoggerFactory.getLogger(WebController::class.java)

    /**
     * Redirect to auth page for unauthenticated users or todos page for authenticated users.
     */
    @GetMapping("/")
    fun home(): String {
        logger.info("Redirecting to auth page (authentication check will be handled client-side)")
        // For now, always redirect to auth page since we need client-side JS to check JWT
        return "redirect:/auth"
    }

    /**
     * Render the users page with user management functionality.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/users", produces = ["text/html"])
    @ResponseBody
    fun users(): String {
        logger.info("Rendering users page with pure Summon")
        
        return try {
            val users = userService.getAllUsers()
            
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "User Management - Spring Boot Summon Example"
            ) {
                Div(
                    modifier = Modifier()
                        .maxWidth(1200.px)
                        .margin("0 auto")
                        .padding("0 ${1.rem}")
                ) {
                    UserPageHeaderComponent()
                    AddUserFormComponent()
                    SummonUserManagementComponent(users)
                    UserStatisticsComponent(users)
                }
            }
        } catch (e: Exception) {
            logger.error("Error rendering users page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading users: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the users page.")
                }
            }
        }
    }

    /**
     * Render the dashboard page with statistics and activity.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/dashboard", produces = ["text/html"])
    @ResponseBody
    fun dashboard(): String {
        logger.info("Rendering dashboard page with pure Summon")
        
        return try {
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Dashboard - Spring Boot Summon Example"
            ) {
                Div(
                    modifier = Modifier()
                        .maxWidth(1200.px)
                        .margin("0 auto")
                        .padding("0 ${1.rem}")
                ) {
                    DashboardComponent()
                }
            }
        } catch (e: Exception) {
            logger.error("Error rendering dashboard page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading dashboard: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the dashboard.")
                }
            }
        }
    }

    /**
     * Render the contact page with contact form.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/contact", produces = ["text/html"])
    @ResponseBody
    fun contact(): String {
        logger.info("Rendering contact page with pure Summon")
        
        return try {
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Contact Us - Spring Boot Summon Example"
            ) {
                Div(
                    modifier = Modifier()
                        .maxWidth(1200.px)
                        .margin("0 auto")
                        .padding("0 ${1.rem}")
                ) {
                    ContactFormComponent()
                }
            }
        } catch (e: Exception) {
            logger.error("Error rendering contact page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading contact page: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the contact page.")
                }
            }
        }
    }

    /**
     * Render the chat page.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/chat", produces = ["text/html"])
    @ResponseBody
    fun chat(): String {
        logger.info("Rendering chat page with pure Summon")
        
        return try {
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Chat - Spring Boot Summon Example"
            ) {
                Div(
                    modifier = Modifier()
                        .maxWidth(1200.px)
                        .margin("0 auto")
                        .padding("0 ${1.rem}")
                ) {
                    SummonChatComponent()
                }
            }
        } catch (e: Exception) {
            logger.error("Error rendering chat page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading chat page: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the chat page.")
                }
            }
        }
    }

    /**
     * Handle user creation form submission.
     */
    @PostMapping("/users")
    fun createUser(
        @RequestParam name: String,
        @RequestParam email: String,
        @RequestParam role: String,
        redirectAttributes: RedirectAttributes
    ): String {
        logger.info("Creating new user: $name")
        
        try {
            val user = User(name = name, email = email, role = role)
            userService.addUser(user)
            
            redirectAttributes.addFlashAttribute("message", "User created successfully!")
            redirectAttributes.addFlashAttribute("messageType", "success")
        } catch (e: Exception) {
            logger.error("Error creating user", e)
            redirectAttributes.addFlashAttribute("message", "Error creating user: ${e.message}")
            redirectAttributes.addFlashAttribute("messageType", "error")
        }
        
        return "redirect:/users"
    }

    /**
     * Handle user update form submission.
     */
    @PostMapping("/users/{id}")
    fun updateUser(
        @PathVariable id: Long,
        @RequestParam name: String,
        @RequestParam email: String,
        @RequestParam role: String,
        redirectAttributes: RedirectAttributes
    ): String {
        logger.info("Updating user: $id")
        
        try {
            val user = User(id = id, name = name, email = email, role = role)
            val updated = userService.updateUser(id, user)
            
            if (updated != null) {
                redirectAttributes.addFlashAttribute("message", "User updated successfully!")
                redirectAttributes.addFlashAttribute("messageType", "success")
            } else {
                redirectAttributes.addFlashAttribute("message", "User not found!")
                redirectAttributes.addFlashAttribute("messageType", "error")
            }
        } catch (e: Exception) {
            logger.error("Error updating user", e)
            redirectAttributes.addFlashAttribute("message", "Error updating user: ${e.message}")
            redirectAttributes.addFlashAttribute("messageType", "error")
        }
        
        return "redirect:/users"
    }

    /**
     * Handle user deletion.
     */
    @PostMapping("/users/{id}/delete")
    fun deleteUser(
        @PathVariable id: Long,
        redirectAttributes: RedirectAttributes
    ): String {
        logger.info("Deleting user: $id")
        
        try {
            val deleted = userService.deleteUser(id)
            
            if (deleted) {
                redirectAttributes.addFlashAttribute("message", "User deleted successfully!")
                redirectAttributes.addFlashAttribute("messageType", "success")
            } else {
                redirectAttributes.addFlashAttribute("message", "User not found!")
                redirectAttributes.addFlashAttribute("messageType", "error")
            }
        } catch (e: Exception) {
            logger.error("Error deleting user", e)
            redirectAttributes.addFlashAttribute("message", "Error deleting user: ${e.message}")
            redirectAttributes.addFlashAttribute("messageType", "error")
        }
        
        return "redirect:/users"
    }

    /**
     * Show edit user form.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/users/{id}/edit", produces = ["text/html"])
    @ResponseBody
    fun editUser(@PathVariable id: Long): String {
        logger.info("Editing user: $id")
        
        return try {
            val user = userService.getUserById(id)
            if (user != null) {
                // Render complete HTML page using pure Summon components
                renderFullPage(
                    renderer = summonRenderer.renderer,
                    title = "Edit User - Spring Boot Summon Example"
                ) {
                    Div(
                        modifier = Modifier()
                            .maxWidth(600.px)
                            .margin("2rem auto")
                            .padding("0 ${1.rem}")
                    ) {
                        EditUserFormComponent(user)
                    }
                }
            } else {
                // Return error page as pure Summon HTML
                renderFullPage(
                    renderer = summonRenderer.renderer,
                    title = "Error",
                    message = "User not found",
                    messageType = "error"
                ) {
                    Div(
                        modifier = Modifier()
                            .padding(2.rem)
                            .textAlign("center")
                    ) {
                        Text("The requested user could not be found.")
                    }
                }
            }
        } catch (e: Exception) {
            logger.error("Error loading user for edit", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading user: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the user.")
                }
            }
        }
    }

    /**
     * Handle user status toggle.
     */
    @PostMapping("/users/{id}/toggle-status")
    fun toggleUserStatus(
        @PathVariable id: Long,
        redirectAttributes: RedirectAttributes
    ): String {
        logger.info("Toggling status for user: $id")
        
        try {
            val user = userService.getUserById(id)
            if (user != null) {
                val updatedUser = user.copy(active = !user.active)
                userService.updateUser(id, updatedUser)
                
                val status = if (updatedUser.active) "activated" else "deactivated"
                redirectAttributes.addFlashAttribute("message", "User ${user.name} has been $status!")
                redirectAttributes.addFlashAttribute("messageType", "success")
            } else {
                redirectAttributes.addFlashAttribute("message", "User not found!")
                redirectAttributes.addFlashAttribute("messageType", "error")
            }
        } catch (e: Exception) {
            logger.error("Error toggling user status", e)
            redirectAttributes.addFlashAttribute("message", "Error updating user status: ${e.message}")
            redirectAttributes.addFlashAttribute("messageType", "error")
        }
        
        return "redirect:/users"
    }

    /**
     * Handle contact form submission.
     */
    @PostMapping("/contact")
    fun submitContact(
        @RequestParam name: String,
        @RequestParam email: String,
        @RequestParam subject: String,
        @RequestParam message: String,
        redirectAttributes: RedirectAttributes
    ): String {
        logger.info("Contact form submitted by: $name")
        
        try {
            // In a real application, you would send an email or save to database
            logger.info("Contact form - Name: $name, Email: $email, Subject: $subject, Message: $message")
            
            redirectAttributes.addFlashAttribute("message", "Thank you for your message! We'll get back to you soon.")
            redirectAttributes.addFlashAttribute("messageType", "success")
        } catch (e: Exception) {
            logger.error("Error processing contact form", e)
            redirectAttributes.addFlashAttribute("message", "Error sending message: ${e.message}")
            redirectAttributes.addFlashAttribute("messageType", "error")
        }
        
        return "redirect:/contact"
    }
    
    /**
     * Render the todos page.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/todos", produces = ["text/html"])
    @ResponseBody
    fun todos(
        @RequestParam(required = false) username: String?,
        @RequestParam(defaultValue = "en") lang: String,
        @RequestParam(defaultValue = "light") theme: String
    ): String {
        logger.info("Rendering todos page with pure Summon")
        
        return try {
            // In a real app, you'd fetch todos from the database via API
            // For now, pass empty list since JavaScript will load them
            val initialTodos = emptyList<Todo>()
            
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Todo App - Spring Boot Summon Todo App",
                includeJavaScript = true
            ) {
                // Temporarily disabled I18nProvider due to compilation issues
                // I18nProvider(
                //     language = lang,
                //     translations = Translations.get("", lang).let { 
                //         // Convert to flat map for the context
                //         mapOf(
                //             "todo.add_placeholder" to Translations.get("todo.add_placeholder", lang),
                //             "todo.add_button" to Translations.get("todo.add_button", lang),
                //             "todo.clear_completed" to Translations.get("todo.clear_completed", lang),
                //             "filter.all" to Translations.get("filter.all", lang),
                //             "filter.active" to Translations.get("filter.active", lang),
                //             "filter.completed" to Translations.get("filter.completed", lang),
                //             "auth.logout" to Translations.get("auth.logout", lang),
                //             "language.select" to Translations.get("language.select", lang)
                //         )
                //     }
                // ) {
                TodosPage(
                    username = username ?: "User",
                    initialTodos = initialTodos,
                    language = lang,
                    theme = theme
                )
                // }
            }
        } catch (e: Exception) {
            logger.error("Error rendering todos page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading todos: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the todos page.")
                }
            }
        }
    }
    
    /**
     * Render the auth page.
     * Returns pure HTML generated by Summon - no templates needed.
     */
    @GetMapping("/auth", produces = ["text/html"])
    @ResponseBody
    fun auth(
        @RequestParam(defaultValue = "login") mode: String,
        @RequestParam(defaultValue = "en") lang: String,
        @RequestParam(defaultValue = "light") theme: String
    ): String {
        logger.info("Rendering auth page with pure Summon")
        
        return try {
            // Render complete HTML page using pure Summon components
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "${mode.capitalize()} - Spring Boot Summon Todo App",
                includeJavaScript = true
            ) {
                AuthPage(mode = mode)
            }
        } catch (e: Exception) {
            logger.error("Error rendering auth page", e)
            // Return error page as pure Summon HTML
            renderFullPage(
                renderer = summonRenderer.renderer,
                title = "Error",
                message = "Error loading auth page: ${e.message}",
                messageType = "error"
            ) {
                Div(
                    modifier = Modifier()
                        .padding(2.rem)
                        .textAlign("center")
                ) {
                    Text("An error occurred while loading the auth page.")
                }
            }
        }
    }
}