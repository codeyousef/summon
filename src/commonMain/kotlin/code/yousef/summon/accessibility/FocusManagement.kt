package code.yousef.summon.accessibility

import code.yousef.summon.modifier.Modifier
import code.yousef.summon.modifier.attribute
import code.yousef.summon.runtime.Composable
import code.yousef.summon.runtime.CompositionLocal
import code.yousef.summon.runtime.getPlatformRenderer


/**
 * Utilities for managing focus in web applications.
 * This helps ensure keyboard and screen reader users can navigate the application effectively.
 */
object FocusManagement {
    /**
     * Types of focus behavior for elements.
     */
    enum class FocusBehavior {
        /** Element can be focused but is not in the tab order */
        FOCUSABLE,

        /** Element is in the tab order */
        TABBABLE,

        /** Element cannot be focused */
        DISABLED,

        /** Element is programmatically focused when rendered */
        AUTO_FOCUS
    }

    /**
     * Creates a Modifier with focus management attributes based on the behavior.
     */
    fun createFocusModifier(behavior: FocusBehavior): Modifier {
        val attributes = when (behavior) {
            FocusBehavior.FOCUSABLE -> mapOf("tabindex" to "-1")
            FocusBehavior.TABBABLE -> mapOf("tabindex" to "0")
            FocusBehavior.DISABLED -> mapOf(
                "tabindex" to "-1",
                "aria-disabled" to "true"
            )

            FocusBehavior.AUTO_FOCUS -> mapOf(
                "tabindex" to "0",
                "autofocus" to "true"
            )
        }

        return Modifier(attributes)
    }

    /**
     * Flag to track programmatic focus management.
     * This helps distinguish between user-initiated and programmatic focus changes.
     */
    private var isProgrammaticFocusChange = false

    /**
     * Ensures a component receives focus at a specified point in time.
     *
     * @param focusId Unique identifier for the element to focus
     * @param shouldRestore Whether focus should return to the previous element when done
     */
    fun createFocusPoint(focusId: String, shouldRestore: Boolean = false): Modifier {
        val attributes = mutableMapOf<String, String>()

        attributes["id"] = focusId
        attributes["data-focus-point"] = "true"

        if (shouldRestore) {
            attributes["data-focus-restore"] = "true"
        }

        return Modifier(attributes)
    }

    /**
     * Creates a focus trap that keeps focus within a component.
     * Useful for modals, dialogs, and other components that should trap focus.
     */
    fun createFocusTrap(trapId: String): Modifier {
        return Modifier(
            mapOf(
                "data-focus-trap" to trapId,
                "data-focus-trap-active" to "true"
            )
        )
    }

    /**
     * Creates a focus scope that groups focusable elements.
     * Useful for creating logical focus groups for arrow key navigation.
     */
    fun createFocusScope(scopeId: String): Modifier {
        return Modifier(
            mapOf(
                "data-focus-scope" to scopeId,
                "role" to "group"
            )
        )
    }
}

/**
 * Manages focus within a composable scope.
 * Provides functions to move focus programmatically.
 */
object FocusManager {
    private var currentFocusId: String? = null
    private val focusableElements = mutableMapOf<String, () -> Unit>() // Map ID to focus action

    /** Registers an element that can receive focus. */
    fun registerFocusable(id: String, focusAction: () -> Unit) {
        focusableElements[id] = focusAction
    }

    /** Unregisters a focusable element. */
    fun unregisterFocusable(id: String) {
        focusableElements.remove(id)
        if (currentFocusId == id) {
            currentFocusId = null
            // Optionally move focus to a default element
        }
    }

    /** Requests focus for a specific element by ID. */
    fun requestFocus(id: String) {
        focusableElements[id]?.invoke()
        currentFocusId = id
    }

    /** Moves focus to the next focusable element. (Needs implementation) */
    fun moveFocusNext() {
        // Logic to determine the next focusable element based on order/DOM
        println("FocusManager.moveFocusNext() not implemented.")
    }

    /** Moves focus to the previous focusable element. (Needs implementation) */
    fun moveFocusPrevious() {
        // Logic to determine the previous focusable element
        println("FocusManager.moveFocusPrevious() not implemented.")
    }

    /** Clears the current focus state. */
    fun clearFocus() {
        // Potentially blur the currently focused element if tracked
        currentFocusId = null
        println("FocusManager.clearFocus() called.")
    }
}

/**
 * Makes content focusable, allowing it to receive keyboard focus.
 *
 * @param modifier The modifier to be applied to the content
 * @param focusId Optional ID for this focusable element, autogenerated if not provided
 * @param onFocusChange Optional callback called when focus state changes
 * @param content The content that should be made focusable
 */
@Composable
fun Focusable(
    modifier: Modifier = Modifier(),
    focusId: String = "focus-${generateRandomId()}",
    onFocusChange: ((Boolean) -> Unit)? = null,
    content: @Composable () -> Unit
) {
    val composer = CompositionLocal.currentComposer

    // TODO: How to trigger the actual browser focus?
    // Need a way to get the underlying element/node reference.
    // PlatformRenderer might need a way to associate the rendered element with focusId.
    val focusAction = { /* Platform-specific code to focus element with focusId */
        println("Focus requested for: $focusId (implementation needed)")
        // Example (JS): document.getElementById(focusId)?.focus()
    }

    // Register with FocusManager when composed
    // TODO: Use remember and DisposableEffect for proper registration/unregistration
    // This simple registration will re-register on every recomposition.
    FocusManager.registerFocusable(focusId, focusAction)
    // Consider unregistering in DisposableEffect { onDispose { FocusManager.unregisterFocusable(focusId) } }

    // Apply focus-related attributes via modifier
    val focusableModifier = modifier
        // Add tabindex=0 to make it keyboard focusable
        // Might need specific focus outline styles etc.
        // .tabIndex(0)
        // .onFocus { FocusManager.requestFocus(focusId) } // If modifiers support focus events
        // .id(focusId) // Renderer needs to apply this ID

    composer?.startNode() // Start a logical focusable node
    if (composer?.inserting == true) {
        // Render a container (like Box) applying the modifier,
        // ensuring it has the focusId somehow (e.g., via modifier attribute).
        getPlatformRenderer().renderBox(modifier = focusableModifier.attribute("id", focusId)) // Example
    }
    content() // Compose the actual UI content
    composer?.endNode() // End logical node
}

fun generateRandomId(): String {
    val charPool = ('a'..'z') + ('A'..'Z') + ('0'..'9')
    return (1..10)
        .map { kotlin.random.Random.nextInt(0, charPool.size) }
        .map(charPool::get)
        .joinToString("")
} 
