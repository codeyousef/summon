// --- Checkbox.kt ---
package code.yousef.summon.components.input

import code.yousef.summon.core.PlatformRendererProvider
import code.yousef.summon.modifier.Modifier
import code.yousef.summon.runtime.Composable
import code.yousef.summon.runtime.CompositionLocal
import code.yousef.summon.modifier.opacity // Import if needed
import code.yousef.summon.modifier.cursor // Import if needed
import code.yousef.summon.modifier.applyIf // Import if needed
import code.yousef.summon.modifier.pointerEvents // Import if needed

// ... (rest of Checkbox.kt, applying the pattern) ...
@Composable
fun Checkbox(
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit,
    modifier: Modifier = Modifier(),
    enabled: Boolean = true
) {
    val finalModifier = modifier
        .opacity(if (enabled) 1f else 0.6f)
        .cursor(if (enabled) "pointer" else "default") // Add cursor
        .applyIf(!enabled) { pointerEvents("none") } // Add pointerEvents

    val renderer = PlatformRendererProvider.getRenderer()
    renderer.renderCheckbox(
        checked = checked,
        onCheckedChange = { if (enabled) onCheckedChange(it) },
        label = "", 
        modifier = finalModifier
    )
}


// --- RadioButton.kt ---
package code.yousef.summon.components.input

import code.yousef.summon.core.PlatformRendererProvider
import code.yousef.summon.modifier.Modifier
import code.yousef.summon.runtime.Composable
import code.yousef.summon.runtime.CompositionLocal
import code.yousef.summon.modifier.opacity // Import if needed
import code.yousef.summon.modifier.cursor // Import if needed
import code.yousef.summon.modifier.applyIf // Import if needed
import code.yousef.summon.modifier.pointerEvents // Import if needed

// ... (rest of RadioButton.kt, applying the pattern) ...
@Composable
fun RadioButton(
    selected: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier(),
    enabled: Boolean = true
) {
    val finalModifier = modifier
        .opacity(if (enabled) 1f else 0.6f)
        .cursor(if (enabled) "pointer" else "default")
        .applyIf(!enabled) { pointerEvents("none") } // Add pointerEvents

    val renderer = PlatformRendererProvider.getRenderer()
    renderer.renderRadioButton(
        selected = selected,
        onClick = { if (enabled) onClick() }, 
        label = "", 
        modifier = finalModifier
    )
}


// --- Switch.kt ---
package code.yousef.summon.components.input

import code.yousef.summon.core.PlatformRendererProvider
import code.yousef.summon.modifier.Modifier
import code.yousef.summon.runtime.Composable
import code.yousef.summon.runtime.CompositionLocal
import code.yousef.summon.modifier.opacity // Import if needed
import code.yousef.summon.modifier.cursor // Import if needed
import code.yousef.summon.modifier.applyIf // Import if needed
import code.yousef.summon.modifier.pointerEvents // Import if needed

// ... (rest of Switch.kt, applying the pattern) ...
@Composable
fun Switch(
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit,
    modifier: Modifier = Modifier(),
    enabled: Boolean = true
) {
    val finalModifier = modifier
        .opacity(if (enabled) 1f else 0.6f)
        .cursor(if (enabled) "pointer" else "default")
        .applyIf(!enabled) { pointerEvents("none") } // Add pointerEvents

    val renderer = PlatformRendererProvider.getRenderer()
    renderer.renderSwitch(
        checked = checked,
        onCheckedChange = { if (enabled) onCheckedChange(it) },
        modifier = finalModifier
    )
}


// --- TextField.kt ---
@Composable
fun TextField(
    // ... parameters ...
    isError: Boolean = false,
    // ... rest of parameters ...
) {
    val isDisabled = !enabled || readOnly
    
    val finalModifier = modifier
        .opacity(if (enabled) 1f else 0.6f) 
        .cursor(if (isDisabled) "default" else "text") 
        .applyIf(isDisabled) { pointerEvents("none") } 
        // Add red border if isError is true
        .applyIf(isError) { border("1px", "solid", "#D32F2F") /* Red color */ }
        // TODO: Implement handling for isError states (e.g., apply specific modifier styles) - Partially done
        // TODO: Structure layout for label, placeholder, icons if provided.

    // ... rest of TextField ...
}

// --- TextArea.kt ---
@Composable
fun TextArea(
    // ... parameters ...
    isError: Boolean = false 
) {
    val finalModifier = modifier
        .opacity(if (enabled) 1f else 0.6f) 
        .cursor(if (enabled) "text" else "default") 
        .applyIf(!enabled) { pointerEvents("none") } 
        // Add red border if isError is true
        .applyIf(isError) { border("1px", "solid", "#D32F2F") /* Red color */ }
        // TODO: Add error styling if isError is true - Partially done

    // ... rest of TextArea ...
} 